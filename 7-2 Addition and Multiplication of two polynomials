#include <stdio.h>
#include <stdlib.h>

typedef int ElementType;

typedef struct Node *PtrToNode;
struct Node {
	ElementType Coefficient;
	ElementType Exponent;
	PtrToNode Next;	
};
typedef PtrToNode Polynomial;
typedef PtrToNode Item;

void AttachToTail(ElementType coe, ElementType exp, Polynomial *tail) {
	Polynomial item = (Polynomial)malloc(sizeof(struct Node));
	item->Coefficient = coe;
	item->Exponent = exp;
	item->Next = NULL;
	(*tail)->Next = item;
	*tail = item;
}

Polynomial readInput() {
	
	Polynomial head = (Polynomial)malloc(sizeof(struct Node)), tail;
	tail = head;
	
	int num;
	scanf("%d", &num);
	
	for(int i = 0; i < num; i++) {
		ElementType coe, exp;
		scanf("%d %d", &coe, &exp);
		AttachToTail(coe, exp, &tail);
	}
	
	return head;
}

void PrintPolynomial(Polynomial P) {
	Polynomial node = P->Next;
	if(!node) printf("%d %d\n", 0, 0);
	else {
		
		int first = 1;
		while(node) {
			if(first) first = !first;
			else printf(" ");
			printf("%d %d", node->Coefficient, node->Exponent);
			node = node->Next;
		}
		printf("\n");
	}
}

int compareExp(ElementType Exp1, ElementType Exp2) {
	int rtn;
	
	if(Exp1 < Exp2) rtn = -1;
	else if( Exp1 == Exp2 ) rtn = 0;
	else rtn = 1;
	return rtn;
}

Polynomial PolyAdd(Polynomial P1, Polynomial P2) {
	Polynomial sum = (Polynomial)malloc(sizeof(struct Node)), tail = sum, item1 = P1->Next, item2 = P2->Next;
	sum->Next = NULL;
	
	while(item1 && item2) {
		switch( compareExp(item1->Exponent, item2->Exponent) ) {
			case -1:
				AttachToTail(item2->Coefficient, item2->Exponent, &tail);
				item2 = item2->Next; 
				break;
			case 0:
				if(item1->Coefficient + item2->Coefficient) \
				AttachToTail(item1->Coefficient + item2->Coefficient, item1->Exponent, &tail);
				item1 = item1->Next;
				item2 = item2->Next;
				break;
			case 1:
				AttachToTail(item1->Coefficient, item1->Exponent, &tail);
				item1 = item1->Next;
		}
	}
	
	if(item1) {
		while(item1) {
			AttachToTail(item1->Coefficient, item1->Exponent, &tail);
			item1 = item1->Next; 
		}
	}
	
	else if(item2) {
		while(item2) {
			AttachToTail(item2->Coefficient, item2->Exponent, &tail);
			item2 = item2->Next; 
		}
	}
	
	return sum;
}

Polynomial PolyMultiplyByItem(Item item, Polynomial P) {
	Polynomial product  = (Polynomial)malloc(sizeof(struct Node)), tail, node;
	product->Next = NULL;
	tail = product;
	
	if(item) {
		Polynomial P_item = P->Next;
		while(P_item) {
			AttachToTail(item->Coefficient * P_item->Coefficient, item->Exponent + P_item->Exponent, &tail);
			
			P_item = P_item->Next; 
		}				
	}
	
	return product;
}

Polynomial PolyMultiply(Polynomial P1, Polynomial P2) {
	
	Polynomial product = (Polynomial)malloc(sizeof(struct Node)), p;
	product->Next = NULL;
	
	Item i = P1->Next;
	while(i){
		p = PolyMultiplyByItem(i, P2);
		product = PolyAdd(product, p);
		
		i = i->Next;
	}
	
	return product;
}

int main() {
	
	Polynomial P1, P2, sum, product;
	
	P1 = readInput();
	//PrintPolynomial(P1);
	
	P2 = readInput();
	//PrintPolynomial(P2);
	
	sum = PolyAdd(P1, P2);
	
//	product = PolyMultiplyByItem(P1->Next,  P2);
//	PrintPolynomial(product);
	
	product = PolyMultiply(P1, P2);
	PrintPolynomial(product);
	PrintPolynomial(sum);
	
	return 0;
}
