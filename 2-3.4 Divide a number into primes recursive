#include <stdio.h>
#include <math.h>
#define MAX 100000

int nums[MAX] = {0}, primes[MAX];
int idx = 1;

typedef enum {false, true} bool;

bool isPrime(int n) {
	
	if(n <= 1) return false;
	
	if(n > 2) {
		for(int i = 2; i * i <= n; i++) {
			if(n % i == 0) return false;
		}
	}
	
	return true;
}

void findPrimes() {
	
	for(int i = 2; i * i < MAX; i++) {
		for(int k = i; i * k < MAX; k++) {
			if(!nums[i * k]) nums[i * k] = 1;
		}
	}
	
	for(int i = 2; i < MAX; i++) {
		if(!nums[i]) primes[idx++] = i;
	}	
	
}


int getExp(int num, int p) {
	int res = 0;
	
	while(num % p == 0) {
		res++;
		num /= p;
	}
	return res;
}

void printResult(int num, int start_index) {
	
	if(num == 1) return;
	
	if(num % primes[start_index] == 0) {
		int exp = getExp(num, primes[start_index]);
		
		num /= (int)pow(primes[start_index], exp);
		printf("%d", primes[start_index]);
		if(exp != 1) printf("^%d", exp);
		if(num != 1) {
			printf("*");
		}	
		printResult(num, start_index + 1);
	}
	else printResult(num, start_index + 1);
	
}




int main() {
	  
    int n, exp, t, count = 0, index = 1;
    scanf("%d", &n);
    
    findPrimes();
    
//    for(int i = 1; i < 101; i++) {
//    	printf("%4d ", primes[i]);
//    	if((i) % 10 == 0) printf("\n");
//	}
//	printf("\n");
	
    t = n;
    
    if(t == 1) printf("1=1");
    else {
    	printf("%d=", n);
	}printResult(n, 1);
    
	printf("\n");
	
    return 0;
}
