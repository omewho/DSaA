#include <stdio.h>
#include <stdlib.h>

typedef char ElementType;

typedef struct TreeNode *Tree;
struct TreeNode {
    ElementType Element;
    Tree  Left;
    Tree  Right;
};

Tree BuildTree() {
	Tree root = (Tree)malloc(sizeof(struct TreeNode));
	ElementType elem;
	scanf("%c", &elem);
	
	if(elem != '-') {
		root->Element = elem;
		root->Left = BuildTree();
		root->Right = BuildTree();		
	}
	else root = NULL;

	return root;
}

void preOrder(Tree T) {
	if(T) {
		printf("%c ", T->Element);
		preOrder(T->Left);
		preOrder(T->Right);
	}
}

void postOrder(Tree T) {
	if(T) {
		
		postOrder(T->Left);
		postOrder(T->Right);
		printf("%c ", T->Element);
	}
}

void printPreandPost(Tree T) {
	preOrder(T);
    printf("\n");
    postOrder(T);
    printf("\n");	
}

int Isomorphic( Tree T1, Tree T2 );

int main()
{
    Tree T1, T2;
    T1 = BuildTree();  
    printPreandPost(T1);
    getchar();
    
    T2 = BuildTree();  
    printPreandPost(T2);
    
    printf("%d\n", Isomorphic(T1, T2));
    return 0;
}

/* 
Sample 1:
ABD--EF---CGH----
ACG-H---BEF---D--

Sample 2:
ABD--EF---CGH----
ABG-H---CDF---E--
*/

int Isomorphic( Tree T1, Tree T2 ) {
	
	if(!T1 && !T2) return 1;
	if( (T1 && !T2) || (!T1 && T2) ) return 0;
	
	if(T1->Element != T2->Element) return 0;
	
	if(!(T1->Left) && !(T2->Left)) return Isomorphic(T1->Right, T2->Right);
	
	if( (T1->Left && T2->Left) && ((T1->Left)->Element == (T2->Left)->Element) ) \
		return Isomorphic(T1->Left, T2->Left) && Isomorphic(T1->Right, T2->Right);
		
	return Isomorphic(T1->Left, T2->Right) && Isomorphic(T1->Right, T2->Left);
	
	return 1;
}
