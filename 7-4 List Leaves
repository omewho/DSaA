#include <stdio.h>
#define Null -1
#define MAXN 10

typedef int BinTree;

typedef enum {false, true} bool;

typedef struct treeNode * Tree;

typedef struct treeNode{
	BinTree Left;
	BinTree Right;	
}BT;

BinTree queue[MAXN];

BinTree readInput(Tree treenodes, int N) {
	
	BinTree root;
	
	bool isRoot[N];
	for(int i = 0; i < N; i++) {
		isRoot[i] = true;
	}
	
	char lch, rch;
	for(int i = 0; i < N; i++) {
		scanf("%c %c", &lch, &rch);
		getchar();
		
		if(lch == '-') treenodes[i].Left = Null;
		else {
			treenodes[i].Left = lch - '0';
			isRoot[treenodes[i].Left] = false;
		}
		
		if(rch == '-') treenodes[i].Right = Null;
		else {
			treenodes[i].Right = rch - '0';
			isRoot[treenodes[i].Right] = false;			
		}
	}
	
	for(int i = 0; i < N; i++) {
		if(isRoot[i]) {
			root = i;
			break;
		} 
	}
	return root;
}

void traverseTree(Tree treenodes, BinTree root){
	
	int head = 0, tail = 0, first = 1;
	queue[tail++] = root;
	while(head < tail) {
		
		if(treenodes[queue[head]].Left == Null && treenodes[queue[head]].Right == Null) {
			if(first) first = 0;
			else printf(" ");
			printf("%d", queue[head]);
		}
		if(treenodes[queue[head]].Left != Null) {
			queue[tail++] = treenodes[queue[head]].Left;
		}
		if(treenodes[queue[head]].Right != Null) {
			queue[tail++] = treenodes[queue[head]].Right;
		}
		head++;
	}
	printf("\n");
}

int main() {
	
	int N;
	scanf("%d\n", &N);
	BT treenodes[N];
	
	BinTree root = readInput(treenodes, N);

	traverseTree(treenodes, root);
	
	return 0;
}
