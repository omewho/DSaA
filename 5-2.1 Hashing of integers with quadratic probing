#include <stdio.h>
#include <math.h>
#define MAX 10010 

typedef enum{Empty, Occupied} Status;
typedef enum{false, true} bool;

//Status cur_status[MAX];

void readNums(int *arr, int n) {
	
	for(int i = 0; i < n; i++) {
		scanf("%d", &arr[i]);
	}
}

void printArr(int *arr, int n) {
	for(int i = 0; i < n; i++) {
		if(i) printf(" ");
		printf("%d", arr[i]);
	}
	printf("\n");	
}

bool isPrime(int n) {
	if(n < 2) return false;
	
	if(n > 2) {
		bool foundfactor = false;
		for(int i = 2; i < (int) sqrt(n) + 1; i++) {
			if(n % i == 0) {
				foundfactor = true;
				break;
			}
		}
		if(foundfactor) return false;	
	}
	
	return true;
}


int getNextPrime(int n) {
	
	while(!isPrime(n)) n++;
	return n;
}

int Hash(int n, int TableSize) {
	
	return n % TableSize;
}


int main() {
	
	int m, n;
	
	scanf("%d%d", &m, &n);
	//printf("%d %d\n", m, n);
	
	int num[n], nextPrime = getNextPrime(m), key, increament, pos, assumed_pos;
	readNums(num, n);
	
	Status cur_status[nextPrime];
	
	for(int i = 0; i < nextPrime; i++) {
		cur_status[i] = Empty;
	}
	
	for(int i = 0; i < n; i++) {
		key = Hash(num[i], nextPrime);
		//printf("key is %d\n", key);
		pos = -1;
		//increament = 0;
		//assumed_pos = key + increament * increament;
		
		for(int increament = 0; increament < nextPrime; increament++) {
			assumed_pos = (key + increament * increament) % nextPrime;
			
			if(cur_status[assumed_pos] == Empty) {
				//printf("incr is %d, ass is %d\n", increament, assumed_pos);
				cur_status[assumed_pos] = Occupied;
				pos = assumed_pos;
				break;
			}
		}
    
		if(i) printf(" ");
		if(pos != -1) printf("%d", pos);
		else printf("-");
	}
	printf("\n");
	
	
	return 0;
}
