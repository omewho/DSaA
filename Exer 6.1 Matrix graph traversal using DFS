#include <stdio.h>
#include <stdlib.h>

typedef enum {false, true} bool;
#define MaxVertexNum 10  /* 最大顶点数设为10 */
#define INFINITY 65535   /* ∞设为双字节无符号整数的最大值65535*/
typedef int Vertex;      /* 用顶点下标表示顶点,为整型 */
typedef int WeightType;  /* 边的权值设为整型 */

typedef struct GNode *PtrToGNode;
struct GNode{
    int Nv;  /* 顶点数 */
    int Ne;  /* 边数   */
    WeightType G[MaxVertexNum][MaxVertexNum]; /* 邻接矩阵 */
};
typedef PtrToGNode MGraph; /* 以邻接矩阵存储的图类型 */
bool Visited[MaxVertexNum]; /* 顶点的访问标记 */

MGraph CreateGraph() {/* 创建图并且将Visited初始化为false；裁判实现，细节不表 */
	
	MGraph Graph = (MGraph)malloc(sizeof(struct GNode));
	scanf("%d%d", &(Graph->Nv), &(Graph->Ne));
	
	Vertex V, W;
	
	for(V = 0; V < Graph->Nv; V++) {
		Visited[V] = false;
		for(W = 0; W < Graph->Nv; W++) {
			Graph->G[V][W] = INFINITY;
		}
	}
	
	for(int i = 0; i < Graph->Ne; i++) {
		scanf("%d%d", &V, &W);
		Graph->G[V][W] = 0;
		Graph->G[W][V] = 0;
	}
	
	return Graph;
}

void Visit( Vertex V ) {
    printf(" %d", V);
}

void DFS( MGraph Graph, Vertex V, void (*Visit)(Vertex) );


int main() {
    MGraph G;
    Vertex V;

    G = CreateGraph();
    scanf("%d", &V);
    printf("DFS from %d:", V);
    DFS(G, V, Visit);

    return 0;
}

/* Testing data set 1  
7 9
0 3
0 2
0 4
2 3
2 5
1 5
4 5
5 6
1 3
5
*/

void DFS( MGraph Graph, Vertex V, void (*Visit)(Vertex) ) {
	
	Vertex W;
	Visit(V);
	Visited[V] = true;
	
	for(W = 0; W < Graph->Nv; W++) {
		
		if(!Visited[W] && Graph->G[V][W] < INFINITY) DFS(Graph, W, Visit);
	}
	
}
