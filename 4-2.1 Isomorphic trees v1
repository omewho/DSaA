#include <stdio.h>
#define MAX 10 
#define Null -3

typedef enum{false, true} bool;
typedef int Tree;
typedef char ElementType;

typedef struct TreeNode {
	ElementType Data;
	Tree Left, Right;
} TNode;
TNode T1[MAX], T2[MAX];

Tree buildTree(TNode *T) {
	int num;
	Tree root;
	scanf("%d", &num);
	
	if(!num) root = Null;
	else {
		int isRoot[num];
		for(int i = 0; i < num; i++) {
			isRoot[i] = 1;
			//printf("isNotRoot[%d] = %d\n", i, isRoot[i]);
		}
		
		for(int i = 0; i < num; i++) {
			getchar();
			
			char dt, lch, rch;
			
			scanf("%c %c %c", &dt, &lch, &rch);
			T[i].Data = dt;
			
			T[i].Left = lch - '0';
			if(T[i].Left != Null) isRoot[T[i].Left] = 0;
			
			T[i].Right = rch - '0';
			if(T[i].Right != Null) isRoot[T[i].Right] = 0;
			
			//printf("%c %d %d\n", T[i].Data, T[i].Left, T[i].Right);
		}
		
		for(int i = 0; i < num; i++) {
			if(isRoot[i]) {
				root = i;
				break;
			}
		}
	}

	return root;
}


void preOrder(TNode *T, Tree t) {
	if(t != Null) {
		printf("%c ", T[t].Data);
		preOrder(T, T[t].Left);
		preOrder(T, T[t].Right);
	}
}

bool isomorphic(Tree t1, Tree t2) {
	
	if(t1 == Null && t2 == Null) return true;
	if((t1 == Null && t2 != Null) || (t1 != Null && t2 == Null)) return false;
	
	if(t1 != Null && t2 != Null) {
		if(T1[t1].Data != T2[t2].Data) return false;
		
		if(T1[t1].Left == Null && T2[t2].Left == Null) return isomorphic(T1[t1].Right, T2[t2].Right); //both of the left trees are empty
		
		if(T1[t1].Left != Null && T2[t2].Left != Null) {
			if(T1[T1[t1].Left].Data == T2[T2[t2].Left].Data) \
				return isomorphic(T1[t1].Left, T2[t2].Left) && isomorphic(T1[t1].Right, T2[t2].Right);
		}
		
		return isomorphic(T1[t1].Left, T2[t2].Right) && isomorphic(T1[t1].Right, T2[t2].Left);
	}
	
}


int main() {
	
	Tree t1, t2;
	t1 = buildTree(T1);
	t2 = buildTree(T2);
	
//	printf("%d %d\n", t1, t2);	
	
//	printf("Preorder: ");
//	preOrder(T1, t1);
//	printf("\n");
//	
//	printf("Preorder: ");
//	preOrder(T2, t2);
	
	if(isomorphic(t1, t2)) printf("Yes\n");
	else printf("No\n");
	
	return 0;
}
