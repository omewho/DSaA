#include <stdio.h>
#include <stdlib.h>

typedef int ElementType;
typedef struct BSTreeNode *BSTree;
struct BSTreeNode {
	ElementType Data;
	BSTree Left, Right;
};

BSTree insert(BSTree root, ElementType X) {
	
	BSTree treenode = (BSTree)malloc(sizeof(struct BSTreeNode));
	treenode->Data = X;
	treenode->Left = treenode->Right = NULL;
	
	if(!root) root = treenode;
	if(X < root->Data) root->Left = insert(root->Left, X);
	else if( X > root->Data ) root->Right = insert(root->Right, X);
	
	return root;
}

BSTree buildTree(int n) {
	
	BSTree root = NULL;
	int data;
	for(int i = 0; i < n; i++) {
		
		scanf("%d", &data);
		
		root = insert(root, data);
	}
	return root;
}

void preOrder(BSTree root, ElementType *preorder_seq, int *idx) {
	if(root) {
		preorder_seq[(*idx)++] = root->Data;
		preOrder(root->Left, preorder_seq, idx);
		//printf("%d ", root->Data);
		 
		preOrder(root->Right, preorder_seq, idx);
	}
}

void printArr(int *arr, int n) {
	
	for(int i = 0; i < n; i++) {
		if(i != 0)printf(" ");
		printf("%d", arr[i]);
	}
	printf("\n");
}

void judge(ElementType *pre, ElementType *this_pre, int n) {
	
	int error = 0;
	for(int i = 0; i < n; i++) {
		if(pre[i] != this_pre[i]) {
			error = 1;
			break;
		}
	}
	if(error) printf("No\n");
	else printf("Yes\n");
}

int main() {
    
    int n;
    scanf("%d", &n);
    
    while(n) {
    	int l;
    	scanf("%d", &l);
    	
    	BSTree root = buildTree(n);
    	
    	ElementType preorder_seq[n];
    	int start = 0;
    	
    	//printf("Pre order traversal: ");
    	preOrder(root, preorder_seq, &start);
    	//printArr(preorder_seq, n);
    	
		
    	for(int i = 0; i < l; i++) {
    		
    		BSTree this_tree = NULL;
    		ElementType sequence[n], this_preorder[n];
    		int this_start = 0;
    		
    		for(int j = 0; j < n; j++) {
    			scanf("%d", &sequence[j]);
    			this_tree = insert(this_tree, sequence[j]);
			}
			preOrder(this_tree, this_preorder, &this_start);
			judge(preorder_seq, this_preorder, n);
		}
    	
    	scanf("%d", &n);
	}
    
    
    
    return 0;
}
