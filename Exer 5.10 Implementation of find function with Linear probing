#include <stdio.h>
#include <stdlib.h>

#define MAXTABLESIZE 100000  /* 允许开辟的最大散列表长度 */
typedef int ElementType;     /* 关键词类型用整型 */
typedef int Index;           /* 散列地址类型 */
typedef Index Position;      /* 数据所在位置与散列地址是同一类型 */
/* 散列单元状态类型，分别对应：有合法元素、空单元、有已删除元素 */
typedef enum { Legitimate, Empty, Deleted } EntryType;

typedef struct HashEntry Cell; /* 散列表单元类型 */
struct HashEntry{
    ElementType Data; /* 存放元素 */
    EntryType Info;   /* 单元状态 */
};

typedef struct TblNode *HashTable; /* 散列表类型 */
struct TblNode {   /* 散列表结点定义 */
    int TableSize; /* 表的最大长度 */
    Cell *Cells;   /* 存放散列单元数据的数组 */
};

HashTable BuildTable() {/* 裁判实现，细节不表 */

	HashTable ht = (HashTable)malloc(sizeof(struct TblNode));
	scanf("%d", &ht->TableSize);
	
	ht->Cells = (Cell*)malloc(ht->TableSize * sizeof(Cell));
	
	ElementType data;
	for(int i = 0; i < ht->TableSize; i++) {
		
		scanf("%d", &data);
		if(data == -1) ht->Cells[i].Info = Empty;
		else {
			ht->Cells[i].Data = data;
			ht->Cells[i].Info = Legitimate;
		}
		if(!ht->Cells->Info) printf("ht->Cells->Data %d\n",ht->Cells->Data);
	}
	//printf("Finished.\n");
	return ht;
} 
Position Hash( ElementType Key, int TableSize ) {
    return (Key % TableSize);
}

#define ERROR -1
Position Find( HashTable H, ElementType Key );

void printHT(HashTable H) {
	
	for(int i = 0; i < H->TableSize; i++) {
		if(H->Cells[i].Info == Empty) printf("data -1\n");
		else printf("%d %d\n", H->Cells[i].Data, H->Cells[i].Info);
	}
}

int main() {
    HashTable H;
    ElementType Key;
    Position P;

    H = BuildTable(); 
    printHT(H);
    
    scanf("%d", &Key);
    P = Find(H, Key);
    if (P==ERROR)
        printf("ERROR: %d is not found and the table is full.\n", Key);
    else if (H->Cells[P].Info == Legitimate)
        printf("%d is at position %d.\n", Key, P);
    else
        printf("%d is not found.  Position %d is returned.\n", Key, P);

    return 0;
}

Position Find( HashTable H, ElementType Key ) {
	
	Position pos_res = ERROR, p, q;
	q = p = Hash(Key, H->TableSize);
	//printf("%d legi? %d\n", q, H->Cells[q].Info == Legitimate);
	//int count = 0;
	while(H->Cells[p].Info != Empty ) {  //&& H->Cells[q].Data != Key
		p = ( p + 1) % H->TableSize;
		//printf("Looking for.... q = %d\n", q);
		
		if( p == q ) break;
		else if ( H->Cells[p].Data == Key ) break;
	}
	//printf("p is %d. is it empty? %d\n", p, H->Cells[p].Info);
	if( H->Cells[p].Info == Empty || H->Cells[p].Data == Key) pos_res = p;
	
	return pos_res;
}

//Position Find( HashTable H, ElementType Key ) {
//	
//	Position p = ERROR, q;
//	q = Hash(Key, H->TableSize);
//	//printf("%d legi? %d\n", q, H->Cells[q].Info == Legitimate);
//	int count = 0;
//	while(H->Cells[q].Info == Legitimate && H->Cells[q].Data != Key) {
//		q = ( q + 1) % H->TableSize;
//		//printf("Looking for.... q = %d\n", q);
//		count++;
//		if(count == H->TableSize) break;
//	}
//	
//	if( H->Cells[q].Info != Legitimate || H->Cells[q].Data == Key) p = q;
//	
//	
//	return p;
//}
