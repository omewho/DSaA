#include <stdio.h>
#define MaxVertexNum 100
#define INF 65535

int map[MaxVertexNum][MaxVertexNum], inDegree[MaxVertexNum], earliest[MaxVertexNum];

void readG(int Nv, int Ne) {
	
	for(int i = 0; i < Nv; i++) {
		for(int j = 0; j < Nv; j++) {
			map[i][j] = INF;
		}
	}
	
	int u, v, time;
	for(int i = 0; i < Ne; i++) {
		scanf("%d%d%d", &u, &v, &time);
		map[u][v] = time;
		inDegree[v]++;
	}
}

void calculate(int Nv) {
	
	int Queue[Nv], front = 0, rear = 0;
	
	for(int i = 0; i < Nv; i++) {
		if( !inDegree[i] ) Queue[rear++] = i;
	}
	
	//int count = 0;
	while( front != rear) {
		int u = Queue[front++], v;
		
		for(v = 0; v < Nv; v++) {
			
			if(map[u][v] < INF ) {
				
				if(earliest[u] + map[u][v] > earliest[v]) earliest[v] = earliest[u] + map[u][v];
				
				inDegree[v]--;
				if( !inDegree[v] ) Queue[rear++] = v;
				
			}
		}
		
	}
	
	if(front != Nv) printf("Impossible\n");
	else {
		int max = 0;
		for(int i = 0; i < Nv; i++) {
			if( earliest[i] > max ) max = earliest[i];
		}
		printf("%d\n", max);
	}
		
}

int main() {
	
	int Nv, Ne;
	scanf("%d%d", &Nv, &Ne);
	
	readG(Nv, Ne);
	calculate(Nv);
	
	return 0;
}
