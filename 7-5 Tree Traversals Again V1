#include <stdio.h>
#define MAX 30
int PRE[MAX], IN[MAX], POST[MAX], Stack[MAX], indicies[MAX + 1]; // indicies start from 1

typedef enum { push, pop } Operation;

Operation getOp() {
	char op[5];
	scanf("%s", op);
	//printf("%s\n", op);
	
	switch(op[1]) {
		case 'u': return push;
		case 'o': return pop;
	}
}

int readInput() {
	int num;
	scanf("%d", &num);
	
	int pre = 0, in = 0, stacktop = 0, index;
	for(int i = 0; i < num * 2; i++) {
		Operation op = getOp();
		switch(op) {
			case push:
				scanf("%d", &PRE[pre]);
				Stack[stacktop++] = PRE[pre++];
				break;
			case pop:
				IN[in++] = Stack[--stacktop];
				//printf("in is %d, IN[%d] is %d\n", in - 1, in - 1, IN[in - 1]);
				index = in - 1;
				//printf("index is %d\n", index);
				indicies[IN[index]] = index;
				break;
		}
	}
	return num;
}

void transpose(int pre_start, int in_start, int post_start, int total) {
	
	if( !total ) return;
	if( total == 1) {
		POST[post_start] = PRE[pre_start];
		return;
	}
	
	int left_num = indicies[PRE[pre_start]] - in_start;
	//printf("left num is %d, pre-strat is %d, right num is %d\n", left_num, pre_start, total - left_num - 1);
	POST[post_start + total - 1] = PRE[pre_start];
	
	transpose(pre_start + 1, in_start, post_start, left_num);
	transpose(pre_start + left_num + 1, in_start + left_num + 1, post_start + left_num, total - left_num - 1);
	
}

void printArr(int *arr, int num) {
	for(int i = 0; i < num; i++) {
		if(i != 0) printf(" ");
		printf("%d", arr[i]);
	}
	printf("\n");
}

void printIndicies(int *ind, int num) {
	for(int i = 1; i < num + 1; i++) {
		if(i != 1) printf(" ");
		printf("%d", ind[i]);
	}
	printf("\n");	
}

int main() {
	
	int N = readInput();
	
//	printArr(PRE, N);
//	printArr(IN, N);
//	printIndicies(indicies, N);
	
	transpose(0, 0, 0, N);
	
	printArr(POST, N);
	return 0;
}
