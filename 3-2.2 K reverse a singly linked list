#include <stdio.h>
#include <stdlib.h>

typedef int ElementType;

typedef struct Node *PtrToNode;
struct Node {
    ElementType Data; /* 存储结点数据 */
    PtrToNode Next; /* 指向下一个结点的指针 */
};
typedef PtrToNode List; /* 定义单链表类型 */

List ReadInput() {
	List head = (List)malloc(sizeof(struct Node)), tail;
	head->Next = NULL;
	
	int n;
	scanf("%d", &n);
	
	for(int i = 0; i < n; i++) {
		PtrToNode node = (PtrToNode)malloc(sizeof(struct Node));
		scanf("%d", &node->Data);
		node->Next = NULL;
		
		if(!(head->Next)) head->Next = node;
		else tail->Next = node;
		
		tail = node;
	}
	return head;
} 

void PrintList( List L ) {
	PtrToNode node = L->Next;
	
	int first = 1;
	while(node) {
		if(first) first = 0;
		else printf(" ");
		
		printf("%d", node->Data);
		
		node = node->Next;
	}
	printf("\n"); 
} 

void K_Reverse( List L, int K );

int main()
{
    List L;
    int K;

    L = ReadInput();
    PrintList( L );
    
    scanf("%d", &K);  
    K_Reverse( L, K );
    PrintList( L );

    return 0;
}

void K_Reverse( List L, int K ) {
	
	PtrToNode node = L->Next, cur, next, prev, head = L, prev_alias;
	
	int length = 0, rev_times;
	while(node) {
		length++;
		node = node->Next;
	}
	rev_times = length / K;
	
	if(K <= 1 || !rev_times) return;

	for(int time = 0; time < rev_times; time++){
		
		prev = head->Next;
		cur = prev->Next;
		prev_alias = prev;
		//printf("prev = %d cur  = %d\n", prev->Data, cur->Data);
		
		for(int i = 0; i < K - 1; i++) {
			//printf("i = %d\n", i);
			next = cur->Next;
			//printf("next = %d\n", next->Data);
			cur->Next = prev;
			//if(cur) printf("i = %d, cur = %d prev = %d\n", i, cur->Data, cur->Next->Data);
			prev = cur;
			cur = next;
			//printf("I am here.\n");
		}
		
		head->Next = prev;
		prev_alias->Next = cur;
		head = prev_alias;
				
	}	
}
