#include <stdio.h>
#include <stdlib.h>

#define ERROR -1
typedef int ElementType;
typedef enum { push, pop, end } Operation;
typedef enum { false, true } bool;
typedef int Position;
typedef struct SNode *PtrToSNode;
struct SNode {
    ElementType *Data;  /* 存储元素的数组 */
    Position Top;       /* 栈顶指针       */
    int MaxSize;        /* 堆栈最大容量   */
};
typedef PtrToSNode Stack;

Stack CreateStack( int MaxSize )
{
    Stack S = (Stack)malloc(sizeof(struct SNode));
    S->Data = (ElementType *)malloc(MaxSize * sizeof(ElementType));
    S->Top = 0;
    S->MaxSize = MaxSize;
    return S;
}

bool Push( Stack S, ElementType X );
ElementType Pop( Stack S );

Operation GetOp() {
	char op[5];
	getchar();
	
	scanf("%s", op);
	switch(op[1]) {
		case 'u': return push;
		case 'o': return pop;
		case 'n': return end;
	}
}          /* 裁判实现，细节不表 */
void PrintStack( Stack S ) {
	
	Position pos = S->Top;
	
	int first = 1;
	while(S->Top >= 1) {
		if(first) first = 0;
		else printf(" ");
		printf("%d", Pop(S));
	}
	printf("\n");
} /* 裁判实现，细节不表 */

int main()
{
    ElementType X;
    Stack S;
    int N, done = 0;

    scanf("%d", &N);
    S = CreateStack(N);
    while ( !done ) {
        switch( GetOp() ) {
        case push: 
            scanf("%d", &X);
            Push(S, X);
            break;
        case pop:
            X = Pop(S);
            if ( X!=ERROR ) printf("%d is out\n", X);
            break;
        case end:
            PrintStack(S);
            done = 1;
            break;
        }
    }
    return 0;
}

bool Push( Stack S, ElementType X ) {
	
	if(S->Top == S->MaxSize) {
		printf("Stack Full\n");
		return false;
	}
	
	S->Data[(S->Top)++] = X;
	return true;
}

ElementType Pop( Stack S ) {
	
	if( S->Top == 0 ) {
		printf("Stack Empty\n");
		return ERROR;
	}
	
	return S->Data[--(S->Top)];
}
