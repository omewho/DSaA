#include <stdio.h>
#include <stdlib.h>

typedef int ElementType;
#define MinData -1

typedef struct HeapStruct *PriorityQueue;
struct HeapStruct {
    ElementType  *Elements;
    int Capacity;
    int Size;
};

PriorityQueue Initialize( int MaxElements ) {
	
	PriorityQueue Q = (PriorityQueue)malloc(sizeof(struct HeapStruct));
	Q->Elements = (ElementType  *)malloc(sizeof( ElementType ));
	Q->Capacity = MaxElements;
	Q->Size = 0;
	Q->Elements[Q->Size] = MinData;
	
	return Q;
} /* details omitted */

void PercolateUp( int p, PriorityQueue H );
void PercolateDown( int p, PriorityQueue H );

void Insert( ElementType X, PriorityQueue H ) {
    int p = ++H->Size;
    H->Elements[p] = X;
    PercolateUp( p, H );
}

ElementType DeleteMin( PriorityQueue H ) { 
    ElementType MinElement; 
    MinElement = H->Elements[1];
    H->Elements[1] = H->Elements[H->Size--];
    PercolateDown( 1, H );
    return MinElement; 
}

int main() {
    int n, i, op, X;
    PriorityQueue H;

    scanf("%d", &n);
    H = Initialize(n);
    for ( i=0; i<n; i++ ) {
        scanf("%d", &op);
        switch( op ) {
        case 1:
            scanf("%d", &X);
            Insert(X, H);
            
//            printf("\nAfter intertion, inside H:");
//    		for ( i=1; i<=H->Size; i++ )
//        		printf(" %d", H->Elements[i]);
//        	printf("\n");
            break;
        case 0:
            printf("%d ", DeleteMin(H));
//            printf("\nAfter delete, inside H:");
//    		for ( i=1; i<=H->Size; i++ )
//        		printf(" %d", H->Elements[i]);
//        	printf("\n");
            break;
        }
    }
    printf("\nInside H:");
    for ( i=1; i<=H->Size; i++ )
        printf(" %d", H->Elements[i]);
    return 0;
}


void PercolateUp( int p, PriorityQueue H ) {
	
	ElementType temp = H->Elements[p];
	while(H->Elements[p / 2] > temp) {
		H->Elements[p] = H->Elements[p / 2];
		p /= 2;
		//printf("p is %d\n", p);
	}
	H->Elements[p] = temp;
}

void PercolateDown( int p, PriorityQueue H ) {
	
	int parent = 1, child;
	ElementType temp = H->Elements[1];
	
	while(parent * 2 <= H->Size) {
		child = parent * 2;
		if(child < H->Size && H->Elements[child] > H->Elements[child + 1]) child++;
		
		if(H->Elements[parent] > H->Elements[child]) H->Elements[parent] = H->Elements[child];
		else break;
		parent = child;
	}
	H->Elements[parent] = temp;
}
